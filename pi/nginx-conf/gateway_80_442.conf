server {
	listen 80 default_server;
	listen [::]:80 default_server;
	root /var/www;
	server_name ~^(www\.)?(?<domain>.+)$;

	location ^~ /.well-known/acme-challenge {
		proxy_pass http://127.0.0.1:82;
		proxy_redirect off;
	}
	location = /robots.txt {
		allow all;
		log_not_found off;
		access_log off;
	}
	location / {
		# Enforce HTTPS
		return 301 https://$domain$request_uri;
	}		
}

server {
	listen 443 ssl http2 default_server;
	listen [::]:443 ssl http2 default_server;
	server_name _;
	root /var/www;

	# Configure SSL
	# not used in newer versions of nginx? warning if on
	# ssl on;
	# Certificates used
	ssl_certificate /etc/letsencrypt/live/domain.net/fullchain.pem;
	ssl_certificate_key /etc/letsencrypt/live/domain.net/privkey.pem;

	# Not using TLSv1 will break:
	#	Android <= 4.4.40
	#	IE <= 10
	#	IE mobile <=10
	# Removing TLSv1.1 breaks nothing else!
		# There are not many clients using TLSv1.3 so far, but this can be activated with nginx v1.13
	ssl_protocols TLSv1.2 TLSv1.3;

	# Using the recommended cipher suite from: https://wiki.mozilla.org/Security/Server_Side_TLS
	ssl_ciphers 'ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!3DES:!MD5:!PSK';

	# Diffie-Hellman parameter for DHE ciphersuites, recommended 2048 bits
	ssl_dhparam /etc/nginx/ssl/dhparams.pem;

	# Specifies a curve for ECDHE ciphers.
	# High security, but will not work with Chrome:
	#ssl_ecdh_curve secp521r1;  
	# Works with Windows (Mobile), but not with Android (DavDroid):
	#ssl_ecdh_curve secp384r1;
	# Works with Android (DavDroid):
	ssl_ecdh_curve prime256v1; 

	# Server should determine the ciphers, not the client
	ssl_prefer_server_ciphers on;

	# OCSP Stapling
	# fetch OCSP records from URL in ssl_certificate and cache them
	ssl_stapling on;
	ssl_stapling_verify on;
	ssl_trusted_certificate /etc/letsencrypt/live/domain.net/fullchain.pem;
	resolver 192.168.1.1;
  
	# SSL session handling
	ssl_session_timeout 24h;
	ssl_session_cache shared:SSL:50m;
	ssl_session_tickets off;

	# don't send the nginx version number in error pages and Server header
	server_tokens off;
 
	# Add headers to serve security related headers
	# HSTS (ngx_http_headers_module is required)
	# In order to be recoginzed by SSL test, there must be an index.hmtl in the server's root
	add_header X-Content-Type-Options "nosniff" always;
	add_header X-Download-Options "noopen" always;
	add_header X-Permitted-Cross-Domain-Policies "none" always;
	add_header X-XSS-Protection "1; mode=block" always;
	add_header Strict-Transport-Security "max-age=63072000; includeSubdomains" always;
	add_header Cache-Control "public, max-age=15778463";

	location = /esp32fota.json {
	try_files $uri $uri/ =404;
	}

	location = /firmware.bin {
	try_files $uri $uri/ =404;
	}

	location ^~ /nodered/ {
		proxy_set_header Upgrade $http_upgrade;
		proxy_set_header Connection "upgrade";
		proxy_set_header Host $host;
		proxy_set_header X-Real-IP $remote_addr;
		proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
		proxy_set_header X-Forwarded-Proto https;
		proxy_set_header X-Forwarded-Host $host;
		proxy_redirect off;
		proxy_pass http://127.0.0.1:1880;
		rewrite ^/nodered/(.*)$ /$1 break;
	}

	location / {
		client_max_body_size 10G;
		proxy_connect_timeout 3600;
		proxy_send_timeout 3600;
		proxy_read_timeout 3600;
		send_timeout 3600;
		proxy_buffering off;
		proxy_request_buffering off;
		proxy_max_temp_file_size 10240;
		proxy_set_header Host $host;
		proxy_set_header X-Real-IP $remote_addr;
		proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
		proxy_set_header X-Forwarded-Proto https;
		proxy_redirect off;
		# Following 2 options are needed when using web sockets
		proxy_set_header Upgrade $http_upgrade;
		proxy_set_header Connection "upgrade";
		proxy_pass http://127.0.0.1:81;
	}
}
